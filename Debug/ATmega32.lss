
ATmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007c2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000836  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001c  00800060  00800060  00000836  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000836  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000868  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  000008a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001fdf  00000000  00000000  00000a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bcc  00000000  00000000  00002a2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000feb  00000000  00000000  000035f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004f4  00000000  00000000  000045e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b26  00000000  00000000  00004ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c5a  00000000  00000000  000055fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  00006258  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 31 00 	jmp	0x62	; 0x62 <__ctors_end>
   4:	0c 94 80 00 	jmp	0x100	; 0x100 <__vector_1>
   8:	0c 94 ac 00 	jmp	0x158	; 0x158 <__vector_2>
   c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__vector_3>
  10:	0c 94 7e 03 	jmp	0x6fc	; 0x6fc <__vector_4>
  14:	0c 94 a7 03 	jmp	0x74e	; 0x74e <__vector_5>
  18:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  1c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  20:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  24:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  28:	0c 94 36 02 	jmp	0x46c	; 0x46c <__vector_10>
  2c:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__vector_11>
  30:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  34:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  38:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  3c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  40:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  44:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  48:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  4c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  50:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  54:	fe 02       	muls	r31, r30
  56:	08 03       	fmul	r16, r16
  58:	12 03       	mulsu	r17, r18
  5a:	1c 03       	fmul	r17, r20
  5c:	26 03       	mulsu	r18, r22
  5e:	30 03       	mulsu	r19, r16
  60:	3a 03       	fmul	r19, r18

00000062 <__ctors_end>:
  62:	11 24       	eor	r1, r1
  64:	1f be       	out	0x3f, r1	; 63
  66:	cf e5       	ldi	r28, 0x5F	; 95
  68:	d8 e0       	ldi	r29, 0x08	; 8
  6a:	de bf       	out	0x3e, r29	; 62
  6c:	cd bf       	out	0x3d, r28	; 61

0000006e <__do_clear_bss>:
  6e:	20 e0       	ldi	r18, 0x00	; 0
  70:	a0 e6       	ldi	r26, 0x60	; 96
  72:	b0 e0       	ldi	r27, 0x00	; 0
  74:	01 c0       	rjmp	.+2      	; 0x78 <.do_clear_bss_start>

00000076 <.do_clear_bss_loop>:
  76:	1d 92       	st	X+, r1

00000078 <.do_clear_bss_start>:
  78:	ac 37       	cpi	r26, 0x7C	; 124
  7a:	b2 07       	cpc	r27, r18
  7c:	e1 f7       	brne	.-8      	; 0x76 <.do_clear_bss_loop>
  7e:	0e 94 78 00 	call	0xf0	; 0xf0 <main>
  82:	0c 94 df 03 	jmp	0x7be	; 0x7be <_exit>

00000086 <__bad_interrupt>:
  86:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008a <GPIO_INIT>:
#include "ATmega32_EXTERNALINTERRUPTS.h"
#include "ATmega32_TIMER0.h"



void GPIO_INIT(){
  8a:	cf 93       	push	r28
  8c:	df 93       	push	r29
  8e:	00 d0       	rcall	.+0      	; 0x90 <GPIO_INIT+0x6>
  90:	1f 92       	push	r1
  92:	cd b7       	in	r28, 0x3d	; 61
  94:	de b7       	in	r29, 0x3e	; 62
	/* Configure PIND5 as Output */
	GPIOConfiguration_t outputConfiguration;
	outputConfiguration.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
  96:	82 e0       	ldi	r24, 0x02	; 2
  98:	8b 83       	std	Y+3, r24	; 0x03
	outputConfiguration.GPIO_Pin = GPIO_PIN_5;
  9a:	80 e2       	ldi	r24, 0x20	; 32
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	9a 83       	std	Y+2, r25	; 0x02
  a0:	89 83       	std	Y+1, r24	; 0x01
	MCAL_GPIO_Init(GPIOD,&outputConfiguration);
  a2:	be 01       	movw	r22, r28
  a4:	6f 5f       	subi	r22, 0xFF	; 255
  a6:	7f 4f       	sbci	r23, 0xFF	; 255
  a8:	80 e3       	ldi	r24, 0x30	; 48
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	0e 94 04 01 	call	0x208	; 0x208 <MCAL_GPIO_Init>
}
  b0:	0f 90       	pop	r0
  b2:	0f 90       	pop	r0
  b4:	0f 90       	pop	r0
  b6:	df 91       	pop	r29
  b8:	cf 91       	pop	r28
  ba:	08 95       	ret

000000bc <TIMER0_INIT>:

void TIMER0_INIT(){
  bc:	cf 93       	push	r28
  be:	df 93       	push	r29
  c0:	00 d0       	rcall	.+0      	; 0xc2 <TIMER0_INIT+0x6>
  c2:	00 d0       	rcall	.+0      	; 0xc4 <TIMER0_INIT+0x8>
  c4:	1f 92       	push	r1
  c6:	cd b7       	in	r28, 0x3d	; 61
  c8:	de b7       	in	r29, 0x3e	; 62
	/* Configure Timer 0 */
	TIMER0Configuration_t timer0delay1SecConfiguration;
	timer0delay1SecConfiguration.P_IRQ_CallBack = NULL;
  ca:	1d 82       	std	Y+5, r1	; 0x05
  cc:	1c 82       	std	Y+4, r1	; 0x04
	timer0delay1SecConfiguration.Timer0ClockSource = TIMER0_CLOCK_SOURCE_INTERNAL_PRESCALER_8;
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	8a 83       	std	Y+2, r24	; 0x02
	timer0delay1SecConfiguration.Timer0IRQEnable = TIMER0_IRQ_ENABLE_NONE;
  d2:	1b 82       	std	Y+3, r1	; 0x03
	timer0delay1SecConfiguration.Timer0Mode = TIMER0_MODE_Fast_PWM_Noninverting;
  d4:	83 e0       	ldi	r24, 0x03	; 3
  d6:	89 83       	std	Y+1, r24	; 0x01
	MCAL_TIMER0_Init(&timer0delay1SecConfiguration);
  d8:	ce 01       	movw	r24, r28
  da:	01 96       	adiw	r24, 0x01	; 1
  dc:	0e 94 91 02 	call	0x522	; 0x522 <MCAL_TIMER0_Init>
	
}
  e0:	0f 90       	pop	r0
  e2:	0f 90       	pop	r0
  e4:	0f 90       	pop	r0
  e6:	0f 90       	pop	r0
  e8:	0f 90       	pop	r0
  ea:	df 91       	pop	r29
  ec:	cf 91       	pop	r28
  ee:	08 95       	ret

000000f0 <main>:

int main(void)
{		
	GPIO_INIT();
  f0:	0e 94 45 00 	call	0x8a	; 0x8a <GPIO_INIT>
	TIMER0_INIT();
  f4:	0e 94 5e 00 	call	0xbc	; 0xbc <TIMER0_INIT>
	while (1){
		MCAL_TIMER0_SetPWMDutyCycle(128);
  f8:	80 e8       	ldi	r24, 0x80	; 128
  fa:	0e 94 73 03 	call	0x6e6	; 0x6e6 <MCAL_TIMER0_SetPWMDutyCycle>
  fe:	fc cf       	rjmp	.-8      	; 0xf8 <main+0x8>

00000100 <__vector_1>:
 *                                           *
 *         IRQ HANDLERS DEFINITION           *
 * 							    			 *
 *********************************************/
void (*GPtr_EXTI_IRQCallBack[3])(void) = {NULL};
ISR(EXTI0_IRQHandler) {
 100:	1f 92       	push	r1
 102:	0f 92       	push	r0
 104:	0f b6       	in	r0, 0x3f	; 63
 106:	0f 92       	push	r0
 108:	11 24       	eor	r1, r1
 10a:	2f 93       	push	r18
 10c:	3f 93       	push	r19
 10e:	4f 93       	push	r20
 110:	5f 93       	push	r21
 112:	6f 93       	push	r22
 114:	7f 93       	push	r23
 116:	8f 93       	push	r24
 118:	9f 93       	push	r25
 11a:	af 93       	push	r26
 11c:	bf 93       	push	r27
 11e:	ef 93       	push	r30
 120:	ff 93       	push	r31
	if (GPtr_EXTI_IRQCallBack[EXT_INT0_VECTOR_ID] != NULL) {
 122:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 126:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 12a:	30 97       	sbiw	r30, 0x00	; 0
 12c:	21 f0       	breq	.+8      	; 0x136 <__vector_1+0x36>
		//Call Back C function() which will be called once IRQ happen
		GPtr_EXTI_IRQCallBack[EXT_INT0_VECTOR_ID]();
 12e:	09 95       	icall
		//This bit is cleared by writing a ‘1’ into the bit
		GIFR->INTF0 = HIGH;
 130:	8a b7       	in	r24, 0x3a	; 58
 132:	80 64       	ori	r24, 0x40	; 64
 134:	8a bf       	out	0x3a, r24	; 58
	}
}
 136:	ff 91       	pop	r31
 138:	ef 91       	pop	r30
 13a:	bf 91       	pop	r27
 13c:	af 91       	pop	r26
 13e:	9f 91       	pop	r25
 140:	8f 91       	pop	r24
 142:	7f 91       	pop	r23
 144:	6f 91       	pop	r22
 146:	5f 91       	pop	r21
 148:	4f 91       	pop	r20
 14a:	3f 91       	pop	r19
 14c:	2f 91       	pop	r18
 14e:	0f 90       	pop	r0
 150:	0f be       	out	0x3f, r0	; 63
 152:	0f 90       	pop	r0
 154:	1f 90       	pop	r1
 156:	18 95       	reti

00000158 <__vector_2>:

ISR(EXTI1_IRQHandler) {
 158:	1f 92       	push	r1
 15a:	0f 92       	push	r0
 15c:	0f b6       	in	r0, 0x3f	; 63
 15e:	0f 92       	push	r0
 160:	11 24       	eor	r1, r1
 162:	2f 93       	push	r18
 164:	3f 93       	push	r19
 166:	4f 93       	push	r20
 168:	5f 93       	push	r21
 16a:	6f 93       	push	r22
 16c:	7f 93       	push	r23
 16e:	8f 93       	push	r24
 170:	9f 93       	push	r25
 172:	af 93       	push	r26
 174:	bf 93       	push	r27
 176:	ef 93       	push	r30
 178:	ff 93       	push	r31
	if (GPtr_EXTI_IRQCallBack[EXT_INT1_VECTOR_ID] != NULL) {
 17a:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 17e:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 182:	30 97       	sbiw	r30, 0x00	; 0
 184:	21 f0       	breq	.+8      	; 0x18e <__vector_2+0x36>
		//Call Back C function() which will be called once IRQ happen
		GPtr_EXTI_IRQCallBack[EXT_INT1_VECTOR_ID]();
 186:	09 95       	icall
		//This bit is cleared by writing a ‘1’ into the bit
		GIFR->INTF1 = HIGH;
 188:	8a b7       	in	r24, 0x3a	; 58
 18a:	80 68       	ori	r24, 0x80	; 128
 18c:	8a bf       	out	0x3a, r24	; 58
	}
}
 18e:	ff 91       	pop	r31
 190:	ef 91       	pop	r30
 192:	bf 91       	pop	r27
 194:	af 91       	pop	r26
 196:	9f 91       	pop	r25
 198:	8f 91       	pop	r24
 19a:	7f 91       	pop	r23
 19c:	6f 91       	pop	r22
 19e:	5f 91       	pop	r21
 1a0:	4f 91       	pop	r20
 1a2:	3f 91       	pop	r19
 1a4:	2f 91       	pop	r18
 1a6:	0f 90       	pop	r0
 1a8:	0f be       	out	0x3f, r0	; 63
 1aa:	0f 90       	pop	r0
 1ac:	1f 90       	pop	r1
 1ae:	18 95       	reti

000001b0 <__vector_3>:

ISR(EXTI2_IRQHandler) {
 1b0:	1f 92       	push	r1
 1b2:	0f 92       	push	r0
 1b4:	0f b6       	in	r0, 0x3f	; 63
 1b6:	0f 92       	push	r0
 1b8:	11 24       	eor	r1, r1
 1ba:	2f 93       	push	r18
 1bc:	3f 93       	push	r19
 1be:	4f 93       	push	r20
 1c0:	5f 93       	push	r21
 1c2:	6f 93       	push	r22
 1c4:	7f 93       	push	r23
 1c6:	8f 93       	push	r24
 1c8:	9f 93       	push	r25
 1ca:	af 93       	push	r26
 1cc:	bf 93       	push	r27
 1ce:	ef 93       	push	r30
 1d0:	ff 93       	push	r31
	if (GPtr_EXTI_IRQCallBack[EXT_INT2_VECTOR_ID] != NULL) {
 1d2:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>
 1d6:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <__DATA_REGION_ORIGIN__+0x5>
 1da:	30 97       	sbiw	r30, 0x00	; 0
 1dc:	21 f0       	breq	.+8      	; 0x1e6 <__vector_3+0x36>
		//Call Back C function() which will be called once IRQ happen
		GPtr_EXTI_IRQCallBack[EXT_INT2_VECTOR_ID]();
 1de:	09 95       	icall
		//This bit is cleared by writing a ‘1’ into the bit
		GIFR->INTF2 = HIGH;
 1e0:	8a b7       	in	r24, 0x3a	; 58
 1e2:	80 62       	ori	r24, 0x20	; 32
 1e4:	8a bf       	out	0x3a, r24	; 58
	}
}
 1e6:	ff 91       	pop	r31
 1e8:	ef 91       	pop	r30
 1ea:	bf 91       	pop	r27
 1ec:	af 91       	pop	r26
 1ee:	9f 91       	pop	r25
 1f0:	8f 91       	pop	r24
 1f2:	7f 91       	pop	r23
 1f4:	6f 91       	pop	r22
 1f6:	5f 91       	pop	r21
 1f8:	4f 91       	pop	r20
 1fa:	3f 91       	pop	r19
 1fc:	2f 91       	pop	r18
 1fe:	0f 90       	pop	r0
 200:	0f be       	out	0x3f, r0	; 63
 202:	0f 90       	pop	r0
 204:	1f 90       	pop	r1
 206:	18 95       	reti

00000208 <MCAL_GPIO_Init>:
 * @param [in] 	-PinConfig: pointer to GPIO_config that contains pin/port configuration.
 * @retval 		-none
 * Note			-none
 */
void MCAL_GPIO_Init(GPIO_Typedef_t *GPIOx,GPIOConfiguration_t *PinConfig)
{
 208:	fc 01       	movw	r30, r24
	switch(PinConfig->GPIO_Pin)
 20a:	db 01       	movw	r26, r22
 20c:	2d 91       	ld	r18, X+
 20e:	3c 91       	ld	r19, X
 210:	20 31       	cpi	r18, 0x10	; 16
 212:	31 05       	cpc	r19, r1
 214:	09 f4       	brne	.+2      	; 0x218 <MCAL_GPIO_Init+0x10>
 216:	9e c0       	rjmp	.+316    	; 0x354 <MCAL_GPIO_Init+0x14c>
 218:	90 f4       	brcc	.+36     	; 0x23e <MCAL_GPIO_Init+0x36>
 21a:	22 30       	cpi	r18, 0x02	; 2
 21c:	31 05       	cpc	r19, r1
 21e:	09 f4       	brne	.+2      	; 0x222 <MCAL_GPIO_Init+0x1a>
 220:	3f c0       	rjmp	.+126    	; 0x2a0 <MCAL_GPIO_Init+0x98>
 222:	20 f4       	brcc	.+8      	; 0x22c <MCAL_GPIO_Init+0x24>
 224:	21 30       	cpi	r18, 0x01	; 1
 226:	31 05       	cpc	r19, r1
 228:	e9 f0       	breq	.+58     	; 0x264 <MCAL_GPIO_Init+0x5c>
 22a:	08 95       	ret
 22c:	24 30       	cpi	r18, 0x04	; 4
 22e:	31 05       	cpc	r19, r1
 230:	09 f4       	brne	.+2      	; 0x234 <MCAL_GPIO_Init+0x2c>
 232:	54 c0       	rjmp	.+168    	; 0x2dc <MCAL_GPIO_Init+0xd4>
 234:	28 30       	cpi	r18, 0x08	; 8
 236:	31 05       	cpc	r19, r1
 238:	09 f4       	brne	.+2      	; 0x23c <MCAL_GPIO_Init+0x34>
 23a:	6e c0       	rjmp	.+220    	; 0x318 <MCAL_GPIO_Init+0x110>
 23c:	08 95       	ret
 23e:	20 34       	cpi	r18, 0x40	; 64
 240:	31 05       	cpc	r19, r1
 242:	09 f4       	brne	.+2      	; 0x246 <MCAL_GPIO_Init+0x3e>
 244:	c3 c0       	rjmp	.+390    	; 0x3cc <MCAL_GPIO_Init+0x1c4>
 246:	28 f4       	brcc	.+10     	; 0x252 <MCAL_GPIO_Init+0x4a>
 248:	20 32       	cpi	r18, 0x20	; 32
 24a:	31 05       	cpc	r19, r1
 24c:	09 f4       	brne	.+2      	; 0x250 <MCAL_GPIO_Init+0x48>
 24e:	a0 c0       	rjmp	.+320    	; 0x390 <MCAL_GPIO_Init+0x188>
 250:	08 95       	ret
 252:	20 38       	cpi	r18, 0x80	; 128
 254:	31 05       	cpc	r19, r1
 256:	09 f4       	brne	.+2      	; 0x25a <MCAL_GPIO_Init+0x52>
 258:	d7 c0       	rjmp	.+430    	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 25a:	2f 3f       	cpi	r18, 0xFF	; 255
 25c:	3f 4f       	sbci	r19, 0xFF	; 255
 25e:	09 f4       	brne	.+2      	; 0x262 <MCAL_GPIO_Init+0x5a>
 260:	f1 c0       	rjmp	.+482    	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 262:	08 95       	ret
	{
		case GPIO_PIN_0:
		{
			switch(PinConfig->GPIO_Mode)
 264:	db 01       	movw	r26, r22
 266:	12 96       	adiw	r26, 0x02	; 2
 268:	8c 91       	ld	r24, X
 26a:	81 30       	cpi	r24, 0x01	; 1
 26c:	59 f0       	breq	.+22     	; 0x284 <MCAL_GPIO_Init+0x7c>
 26e:	18 f0       	brcs	.+6      	; 0x276 <MCAL_GPIO_Init+0x6e>
 270:	82 30       	cpi	r24, 0x02	; 2
 272:	79 f0       	breq	.+30     	; 0x292 <MCAL_GPIO_Init+0x8a>
 274:	08 95       	ret
			{
				case GPIO_MODE_INPUT_HiZ:
				{
				    GPIOx->DDR.bits.DD0 = GPIO_PIN_LOW;
 276:	81 81       	ldd	r24, Z+1	; 0x01
 278:	8e 7f       	andi	r24, 0xFE	; 254
 27a:	81 83       	std	Z+1, r24	; 0x01
					GPIOx->PORT.bits.PORT0 = GPIO_PIN_LOW;
 27c:	82 81       	ldd	r24, Z+2	; 0x02
 27e:	8e 7f       	andi	r24, 0xFE	; 254
 280:	82 83       	std	Z+2, r24	; 0x02
					break;
 282:	08 95       	ret
				}
				case GPIO_MODE_INPUT_PU:
				{
					GPIOx->DDR.bits.DD0 = GPIO_PIN_LOW;
 284:	81 81       	ldd	r24, Z+1	; 0x01
 286:	8e 7f       	andi	r24, 0xFE	; 254
 288:	81 83       	std	Z+1, r24	; 0x01
					GPIOx->PORT.bits.PORT0 = GPIO_PIN_HIGH;
 28a:	82 81       	ldd	r24, Z+2	; 0x02
 28c:	81 60       	ori	r24, 0x01	; 1
 28e:	82 83       	std	Z+2, r24	; 0x02
					break;
 290:	08 95       	ret
				}
				case GPIO_MODE_OUTPUT_PP:
				{
					GPIOx->DDR.bits.DD0 = GPIO_PIN_HIGH;
 292:	81 81       	ldd	r24, Z+1	; 0x01
 294:	81 60       	ori	r24, 0x01	; 1
 296:	81 83       	std	Z+1, r24	; 0x01
					GPIOx->PORT.bits.PORT0 = GPIO_PIN_LOW;
 298:	82 81       	ldd	r24, Z+2	; 0x02
 29a:	8e 7f       	andi	r24, 0xFE	; 254
 29c:	82 83       	std	Z+2, r24	; 0x02
					break;
 29e:	08 95       	ret
			break;
		}
		
		case GPIO_PIN_1:
		{
			switch(PinConfig->GPIO_Mode)
 2a0:	db 01       	movw	r26, r22
 2a2:	12 96       	adiw	r26, 0x02	; 2
 2a4:	8c 91       	ld	r24, X
 2a6:	81 30       	cpi	r24, 0x01	; 1
 2a8:	59 f0       	breq	.+22     	; 0x2c0 <MCAL_GPIO_Init+0xb8>
 2aa:	18 f0       	brcs	.+6      	; 0x2b2 <MCAL_GPIO_Init+0xaa>
 2ac:	82 30       	cpi	r24, 0x02	; 2
 2ae:	79 f0       	breq	.+30     	; 0x2ce <MCAL_GPIO_Init+0xc6>
 2b0:	08 95       	ret
			{
				case GPIO_MODE_INPUT_HiZ:
				{
					GPIOx->DDR.bits.DD1 = GPIO_PIN_LOW;
 2b2:	81 81       	ldd	r24, Z+1	; 0x01
 2b4:	8d 7f       	andi	r24, 0xFD	; 253
 2b6:	81 83       	std	Z+1, r24	; 0x01
					GPIOx->PORT.bits.PORT1 = GPIO_PIN_LOW;
 2b8:	82 81       	ldd	r24, Z+2	; 0x02
 2ba:	8d 7f       	andi	r24, 0xFD	; 253
 2bc:	82 83       	std	Z+2, r24	; 0x02
					break;
 2be:	08 95       	ret
				}
				case GPIO_MODE_INPUT_PU:
				{
					GPIOx->DDR.bits.DD1 = GPIO_PIN_LOW;
 2c0:	81 81       	ldd	r24, Z+1	; 0x01
 2c2:	8d 7f       	andi	r24, 0xFD	; 253
 2c4:	81 83       	std	Z+1, r24	; 0x01
					GPIOx->PORT.bits.PORT1 = GPIO_PIN_HIGH;
 2c6:	82 81       	ldd	r24, Z+2	; 0x02
 2c8:	82 60       	ori	r24, 0x02	; 2
 2ca:	82 83       	std	Z+2, r24	; 0x02
					break;
 2cc:	08 95       	ret
				}
				case GPIO_MODE_OUTPUT_PP:
				{
					GPIOx->DDR.bits.DD1 = GPIO_PIN_HIGH;
 2ce:	81 81       	ldd	r24, Z+1	; 0x01
 2d0:	82 60       	ori	r24, 0x02	; 2
 2d2:	81 83       	std	Z+1, r24	; 0x01
					GPIOx->PORT.bits.PORT1 = GPIO_PIN_LOW;
 2d4:	82 81       	ldd	r24, Z+2	; 0x02
 2d6:	8d 7f       	andi	r24, 0xFD	; 253
 2d8:	82 83       	std	Z+2, r24	; 0x02
					break;
 2da:	08 95       	ret
			}
			break;
		}
		case GPIO_PIN_2:
		{
			switch(PinConfig->GPIO_Mode)
 2dc:	db 01       	movw	r26, r22
 2de:	12 96       	adiw	r26, 0x02	; 2
 2e0:	8c 91       	ld	r24, X
 2e2:	81 30       	cpi	r24, 0x01	; 1
 2e4:	59 f0       	breq	.+22     	; 0x2fc <MCAL_GPIO_Init+0xf4>
 2e6:	18 f0       	brcs	.+6      	; 0x2ee <MCAL_GPIO_Init+0xe6>
 2e8:	82 30       	cpi	r24, 0x02	; 2
 2ea:	79 f0       	breq	.+30     	; 0x30a <MCAL_GPIO_Init+0x102>
 2ec:	08 95       	ret
			{
				case GPIO_MODE_INPUT_HiZ:
				{
					GPIOx->DDR.bits.DD2 = GPIO_PIN_LOW;
 2ee:	81 81       	ldd	r24, Z+1	; 0x01
 2f0:	8b 7f       	andi	r24, 0xFB	; 251
 2f2:	81 83       	std	Z+1, r24	; 0x01
					GPIOx->PORT.bits.PORT2 = GPIO_PIN_LOW;
 2f4:	82 81       	ldd	r24, Z+2	; 0x02
 2f6:	8b 7f       	andi	r24, 0xFB	; 251
 2f8:	82 83       	std	Z+2, r24	; 0x02
					break;
 2fa:	08 95       	ret
				}
				case GPIO_MODE_INPUT_PU:
				{
					GPIOx->DDR.bits.DD2 = GPIO_PIN_LOW;
 2fc:	81 81       	ldd	r24, Z+1	; 0x01
 2fe:	8b 7f       	andi	r24, 0xFB	; 251
 300:	81 83       	std	Z+1, r24	; 0x01
					GPIOx->PORT.bits.PORT2 = GPIO_PIN_HIGH;
 302:	82 81       	ldd	r24, Z+2	; 0x02
 304:	84 60       	ori	r24, 0x04	; 4
 306:	82 83       	std	Z+2, r24	; 0x02
					break;
 308:	08 95       	ret
				}
				case GPIO_MODE_OUTPUT_PP:
				{
					GPIOx->DDR.bits.DD2 = GPIO_PIN_HIGH;
 30a:	81 81       	ldd	r24, Z+1	; 0x01
 30c:	84 60       	ori	r24, 0x04	; 4
 30e:	81 83       	std	Z+1, r24	; 0x01
					GPIOx->PORT.bits.PORT2 = GPIO_PIN_LOW;
 310:	82 81       	ldd	r24, Z+2	; 0x02
 312:	8b 7f       	andi	r24, 0xFB	; 251
 314:	82 83       	std	Z+2, r24	; 0x02
					break;
 316:	08 95       	ret
			break;
		}
		
		case GPIO_PIN_3:
		{
			switch(PinConfig->GPIO_Mode)
 318:	db 01       	movw	r26, r22
 31a:	12 96       	adiw	r26, 0x02	; 2
 31c:	8c 91       	ld	r24, X
 31e:	81 30       	cpi	r24, 0x01	; 1
 320:	59 f0       	breq	.+22     	; 0x338 <MCAL_GPIO_Init+0x130>
 322:	18 f0       	brcs	.+6      	; 0x32a <MCAL_GPIO_Init+0x122>
 324:	82 30       	cpi	r24, 0x02	; 2
 326:	79 f0       	breq	.+30     	; 0x346 <MCAL_GPIO_Init+0x13e>
 328:	08 95       	ret
			{
				case GPIO_MODE_INPUT_HiZ:
				{
					GPIOx->DDR.bits.DD3 = GPIO_PIN_LOW;
 32a:	81 81       	ldd	r24, Z+1	; 0x01
 32c:	87 7f       	andi	r24, 0xF7	; 247
 32e:	81 83       	std	Z+1, r24	; 0x01
					GPIOx->PORT.bits.PORT3 = GPIO_PIN_LOW;
 330:	82 81       	ldd	r24, Z+2	; 0x02
 332:	87 7f       	andi	r24, 0xF7	; 247
 334:	82 83       	std	Z+2, r24	; 0x02
					break;
 336:	08 95       	ret
				}
				case GPIO_MODE_INPUT_PU:
				{
					GPIOx->DDR.bits.DD3 = GPIO_PIN_LOW;
 338:	81 81       	ldd	r24, Z+1	; 0x01
 33a:	87 7f       	andi	r24, 0xF7	; 247
 33c:	81 83       	std	Z+1, r24	; 0x01
					GPIOx->PORT.bits.PORT3 = GPIO_PIN_HIGH;
 33e:	82 81       	ldd	r24, Z+2	; 0x02
 340:	88 60       	ori	r24, 0x08	; 8
 342:	82 83       	std	Z+2, r24	; 0x02
					break;
 344:	08 95       	ret
				}
				case GPIO_MODE_OUTPUT_PP:
				{
					GPIOx->DDR.bits.DD3 = GPIO_PIN_HIGH;
 346:	81 81       	ldd	r24, Z+1	; 0x01
 348:	88 60       	ori	r24, 0x08	; 8
 34a:	81 83       	std	Z+1, r24	; 0x01
					GPIOx->PORT.bits.PORT3 = GPIO_PIN_LOW;
 34c:	82 81       	ldd	r24, Z+2	; 0x02
 34e:	87 7f       	andi	r24, 0xF7	; 247
 350:	82 83       	std	Z+2, r24	; 0x02
					break;
 352:	08 95       	ret
			}
			break;
		}
		case GPIO_PIN_4:
		{
			switch(PinConfig->GPIO_Mode)
 354:	db 01       	movw	r26, r22
 356:	12 96       	adiw	r26, 0x02	; 2
 358:	8c 91       	ld	r24, X
 35a:	81 30       	cpi	r24, 0x01	; 1
 35c:	59 f0       	breq	.+22     	; 0x374 <MCAL_GPIO_Init+0x16c>
 35e:	18 f0       	brcs	.+6      	; 0x366 <MCAL_GPIO_Init+0x15e>
 360:	82 30       	cpi	r24, 0x02	; 2
 362:	79 f0       	breq	.+30     	; 0x382 <MCAL_GPIO_Init+0x17a>
 364:	08 95       	ret
			{
				case GPIO_MODE_INPUT_HiZ:
				{
					GPIOx->DDR.bits.DD4 = GPIO_PIN_LOW;
 366:	81 81       	ldd	r24, Z+1	; 0x01
 368:	8f 7e       	andi	r24, 0xEF	; 239
 36a:	81 83       	std	Z+1, r24	; 0x01
					GPIOx->PORT.bits.PORT4 = GPIO_PIN_LOW;
 36c:	82 81       	ldd	r24, Z+2	; 0x02
 36e:	8f 7e       	andi	r24, 0xEF	; 239
 370:	82 83       	std	Z+2, r24	; 0x02
					break;
 372:	08 95       	ret
				}
				case GPIO_MODE_INPUT_PU:
				{
					GPIOx->DDR.bits.DD4 = GPIO_PIN_LOW;
 374:	81 81       	ldd	r24, Z+1	; 0x01
 376:	8f 7e       	andi	r24, 0xEF	; 239
 378:	81 83       	std	Z+1, r24	; 0x01
					GPIOx->PORT.bits.PORT4 = GPIO_PIN_HIGH;
 37a:	82 81       	ldd	r24, Z+2	; 0x02
 37c:	80 61       	ori	r24, 0x10	; 16
 37e:	82 83       	std	Z+2, r24	; 0x02
					break;
 380:	08 95       	ret
				}
				case GPIO_MODE_OUTPUT_PP:
				{
					GPIOx->DDR.bits.DD4 = GPIO_PIN_HIGH;
 382:	81 81       	ldd	r24, Z+1	; 0x01
 384:	80 61       	ori	r24, 0x10	; 16
 386:	81 83       	std	Z+1, r24	; 0x01
					GPIOx->PORT.bits.PORT4 = GPIO_PIN_LOW;
 388:	82 81       	ldd	r24, Z+2	; 0x02
 38a:	8f 7e       	andi	r24, 0xEF	; 239
 38c:	82 83       	std	Z+2, r24	; 0x02
					break;
 38e:	08 95       	ret
			break;
		}
		
		case GPIO_PIN_5:
		{
			switch(PinConfig->GPIO_Mode)
 390:	db 01       	movw	r26, r22
 392:	12 96       	adiw	r26, 0x02	; 2
 394:	8c 91       	ld	r24, X
 396:	81 30       	cpi	r24, 0x01	; 1
 398:	59 f0       	breq	.+22     	; 0x3b0 <MCAL_GPIO_Init+0x1a8>
 39a:	18 f0       	brcs	.+6      	; 0x3a2 <MCAL_GPIO_Init+0x19a>
 39c:	82 30       	cpi	r24, 0x02	; 2
 39e:	79 f0       	breq	.+30     	; 0x3be <MCAL_GPIO_Init+0x1b6>
 3a0:	08 95       	ret
			{
				case GPIO_MODE_INPUT_HiZ:
				{
					GPIOx->DDR.bits.DD5 = GPIO_PIN_LOW;
 3a2:	81 81       	ldd	r24, Z+1	; 0x01
 3a4:	8f 7d       	andi	r24, 0xDF	; 223
 3a6:	81 83       	std	Z+1, r24	; 0x01
					GPIOx->PORT.bits.PORT5 = GPIO_PIN_LOW;
 3a8:	82 81       	ldd	r24, Z+2	; 0x02
 3aa:	8f 7d       	andi	r24, 0xDF	; 223
 3ac:	82 83       	std	Z+2, r24	; 0x02
					break;
 3ae:	08 95       	ret
				}
				case GPIO_MODE_INPUT_PU:
				{
					GPIOx->DDR.bits.DD5 = GPIO_PIN_LOW;
 3b0:	81 81       	ldd	r24, Z+1	; 0x01
 3b2:	8f 7d       	andi	r24, 0xDF	; 223
 3b4:	81 83       	std	Z+1, r24	; 0x01
					GPIOx->PORT.bits.PORT5 = GPIO_PIN_HIGH;
 3b6:	82 81       	ldd	r24, Z+2	; 0x02
 3b8:	80 62       	ori	r24, 0x20	; 32
 3ba:	82 83       	std	Z+2, r24	; 0x02
					break;
 3bc:	08 95       	ret
				}
				case GPIO_MODE_OUTPUT_PP:
				{
					GPIOx->DDR.bits.DD5 = GPIO_PIN_HIGH;
 3be:	81 81       	ldd	r24, Z+1	; 0x01
 3c0:	80 62       	ori	r24, 0x20	; 32
 3c2:	81 83       	std	Z+1, r24	; 0x01
					GPIOx->PORT.bits.PORT5 = GPIO_PIN_LOW;
 3c4:	82 81       	ldd	r24, Z+2	; 0x02
 3c6:	8f 7d       	andi	r24, 0xDF	; 223
 3c8:	82 83       	std	Z+2, r24	; 0x02
					break;
 3ca:	08 95       	ret
			}
			break;
		}
		case GPIO_PIN_6:
		{
			switch(PinConfig->GPIO_Mode)
 3cc:	db 01       	movw	r26, r22
 3ce:	12 96       	adiw	r26, 0x02	; 2
 3d0:	8c 91       	ld	r24, X
 3d2:	81 30       	cpi	r24, 0x01	; 1
 3d4:	59 f0       	breq	.+22     	; 0x3ec <MCAL_GPIO_Init+0x1e4>
 3d6:	18 f0       	brcs	.+6      	; 0x3de <MCAL_GPIO_Init+0x1d6>
 3d8:	82 30       	cpi	r24, 0x02	; 2
 3da:	79 f0       	breq	.+30     	; 0x3fa <MCAL_GPIO_Init+0x1f2>
 3dc:	08 95       	ret
			{
				case GPIO_MODE_INPUT_HiZ:
				{
					GPIOx->DDR.bits.DD6 = GPIO_PIN_LOW;
 3de:	81 81       	ldd	r24, Z+1	; 0x01
 3e0:	8f 7b       	andi	r24, 0xBF	; 191
 3e2:	81 83       	std	Z+1, r24	; 0x01
					GPIOx->PORT.bits.PORT6 = GPIO_PIN_LOW;
 3e4:	82 81       	ldd	r24, Z+2	; 0x02
 3e6:	8f 7b       	andi	r24, 0xBF	; 191
 3e8:	82 83       	std	Z+2, r24	; 0x02
					break;
 3ea:	08 95       	ret
				}
				case GPIO_MODE_INPUT_PU:
				{
					GPIOx->DDR.bits.DD6 = GPIO_PIN_LOW;
 3ec:	81 81       	ldd	r24, Z+1	; 0x01
 3ee:	8f 7b       	andi	r24, 0xBF	; 191
 3f0:	81 83       	std	Z+1, r24	; 0x01
					GPIOx->PORT.bits.PORT6 = GPIO_PIN_HIGH;
 3f2:	82 81       	ldd	r24, Z+2	; 0x02
 3f4:	80 64       	ori	r24, 0x40	; 64
 3f6:	82 83       	std	Z+2, r24	; 0x02
					break;
 3f8:	08 95       	ret
				}
				case GPIO_MODE_OUTPUT_PP:
				{
					GPIOx->DDR.bits.DD6 = GPIO_PIN_HIGH;
 3fa:	81 81       	ldd	r24, Z+1	; 0x01
 3fc:	80 64       	ori	r24, 0x40	; 64
 3fe:	81 83       	std	Z+1, r24	; 0x01
					GPIOx->PORT.bits.PORT6 = GPIO_PIN_LOW;
 400:	82 81       	ldd	r24, Z+2	; 0x02
 402:	8f 7b       	andi	r24, 0xBF	; 191
 404:	82 83       	std	Z+2, r24	; 0x02
					break;
 406:	08 95       	ret
				}
			}
			break;
		}
		case GPIO_PIN_7:{
			switch(PinConfig->GPIO_Mode)
 408:	db 01       	movw	r26, r22
 40a:	12 96       	adiw	r26, 0x02	; 2
 40c:	8c 91       	ld	r24, X
 40e:	81 30       	cpi	r24, 0x01	; 1
 410:	59 f0       	breq	.+22     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 412:	18 f0       	brcs	.+6      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 414:	82 30       	cpi	r24, 0x02	; 2
 416:	79 f0       	breq	.+30     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 418:	08 95       	ret
			{
				case GPIO_MODE_INPUT_HiZ:
				{
					GPIOx->DDR.bits.DD7 = GPIO_PIN_LOW;
 41a:	81 81       	ldd	r24, Z+1	; 0x01
 41c:	8f 77       	andi	r24, 0x7F	; 127
 41e:	81 83       	std	Z+1, r24	; 0x01
					GPIOx->PORT.bits.PORT7 = GPIO_PIN_LOW;
 420:	82 81       	ldd	r24, Z+2	; 0x02
 422:	8f 77       	andi	r24, 0x7F	; 127
 424:	82 83       	std	Z+2, r24	; 0x02
					break;
 426:	08 95       	ret
				}
				case GPIO_MODE_INPUT_PU:
				{
					GPIOx->DDR.bits.DD7 = GPIO_PIN_LOW;
 428:	81 81       	ldd	r24, Z+1	; 0x01
 42a:	8f 77       	andi	r24, 0x7F	; 127
 42c:	81 83       	std	Z+1, r24	; 0x01
					GPIOx->PORT.bits.PORT7 = GPIO_PIN_HIGH;
 42e:	82 81       	ldd	r24, Z+2	; 0x02
 430:	80 68       	ori	r24, 0x80	; 128
 432:	82 83       	std	Z+2, r24	; 0x02
					break;
 434:	08 95       	ret
				}
				case GPIO_MODE_OUTPUT_PP:
				{
					GPIOx->DDR.bits.DD7 = GPIO_PIN_HIGH;
 436:	81 81       	ldd	r24, Z+1	; 0x01
 438:	80 68       	ori	r24, 0x80	; 128
 43a:	81 83       	std	Z+1, r24	; 0x01
					GPIOx->PORT.bits.PORT7 = GPIO_PIN_LOW;
 43c:	82 81       	ldd	r24, Z+2	; 0x02
 43e:	8f 77       	andi	r24, 0x7F	; 127
 440:	82 83       	std	Z+2, r24	; 0x02
					break;
 442:	08 95       	ret
			break;
		}
		
		case GPIO_PIN_ALL:
		{
			switch(PinConfig->GPIO_Mode)
 444:	db 01       	movw	r26, r22
 446:	12 96       	adiw	r26, 0x02	; 2
 448:	8c 91       	ld	r24, X
 44a:	81 30       	cpi	r24, 0x01	; 1
 44c:	39 f0       	breq	.+14     	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
 44e:	18 f0       	brcs	.+6      	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
 450:	82 30       	cpi	r24, 0x02	; 2
 452:	41 f0       	breq	.+16     	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
 454:	08 95       	ret
			{
				case GPIO_MODE_INPUT_HiZ:
				{
					GPIOx->DDR.DDR = GPIO_PORT_LOW;
 456:	11 82       	std	Z+1, r1	; 0x01
					GPIOx->PORT.PORT = GPIO_PORT_LOW;
 458:	12 82       	std	Z+2, r1	; 0x02
					break;
 45a:	08 95       	ret
				}
				case GPIO_MODE_INPUT_PU:
				{
					GPIOx->DDR.DDR = GPIO_PORT_LOW;
 45c:	11 82       	std	Z+1, r1	; 0x01
					GPIOx->PORT.PORT = GPIO_PORT_HIGH;
 45e:	8f ef       	ldi	r24, 0xFF	; 255
 460:	82 83       	std	Z+2, r24	; 0x02
					break;
 462:	08 95       	ret
				}
				case GPIO_MODE_OUTPUT_PP:
				{
					GPIOx->DDR.DDR = GPIO_PORT_HIGH;
 464:	8f ef       	ldi	r24, 0xFF	; 255
 466:	81 83       	std	Z+1, r24	; 0x01
					GPIOx->PORT.PORT = GPIO_PORT_LOW;
 468:	12 82       	std	Z+2, r1	; 0x02
 46a:	08 95       	ret

0000046c <__vector_10>:
void MCAL_TIMER0_GetOverflowCount(uint16_t* TicksNumber){
	*TicksNumber = Timer0NumberOfOverflowOccurence;
}

void MCAL_TIMER0_SetOverflowCount(uint16_t u8_TicksNumber){
	Timer0NumberOfOverflowOccurence = u8_TicksNumber;
 46c:	1f 92       	push	r1
 46e:	0f 92       	push	r0
 470:	0f b6       	in	r0, 0x3f	; 63
 472:	0f 92       	push	r0
 474:	11 24       	eor	r1, r1
 476:	2f 93       	push	r18
 478:	3f 93       	push	r19
 47a:	4f 93       	push	r20
 47c:	5f 93       	push	r21
 47e:	6f 93       	push	r22
 480:	7f 93       	push	r23
 482:	8f 93       	push	r24
 484:	9f 93       	push	r25
 486:	af 93       	push	r26
 488:	bf 93       	push	r27
 48a:	ef 93       	push	r30
 48c:	ff 93       	push	r31
 48e:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <GPtr_TIMER0_IRQCallBack>
 492:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <GPtr_TIMER0_IRQCallBack+0x1>
 496:	30 97       	sbiw	r30, 0x00	; 0
 498:	09 f0       	breq	.+2      	; 0x49c <__vector_10+0x30>
 49a:	09 95       	icall
 49c:	ff 91       	pop	r31
 49e:	ef 91       	pop	r30
 4a0:	bf 91       	pop	r27
 4a2:	af 91       	pop	r26
 4a4:	9f 91       	pop	r25
 4a6:	8f 91       	pop	r24
 4a8:	7f 91       	pop	r23
 4aa:	6f 91       	pop	r22
 4ac:	5f 91       	pop	r21
 4ae:	4f 91       	pop	r20
 4b0:	3f 91       	pop	r19
 4b2:	2f 91       	pop	r18
 4b4:	0f 90       	pop	r0
 4b6:	0f be       	out	0x3f, r0	; 63
 4b8:	0f 90       	pop	r0
 4ba:	1f 90       	pop	r1
 4bc:	18 95       	reti

000004be <__vector_11>:
 4be:	1f 92       	push	r1
 4c0:	0f 92       	push	r0
 4c2:	0f b6       	in	r0, 0x3f	; 63
 4c4:	0f 92       	push	r0
 4c6:	11 24       	eor	r1, r1
 4c8:	2f 93       	push	r18
 4ca:	3f 93       	push	r19
 4cc:	4f 93       	push	r20
 4ce:	5f 93       	push	r21
 4d0:	6f 93       	push	r22
 4d2:	7f 93       	push	r23
 4d4:	8f 93       	push	r24
 4d6:	9f 93       	push	r25
 4d8:	af 93       	push	r26
 4da:	bf 93       	push	r27
 4dc:	ef 93       	push	r30
 4de:	ff 93       	push	r31
 4e0:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <GPtr_TIMER0_IRQCallBack+0x2>
 4e4:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <GPtr_TIMER0_IRQCallBack+0x3>
 4e8:	30 97       	sbiw	r30, 0x00	; 0
 4ea:	51 f0       	breq	.+20     	; 0x500 <__vector_11+0x42>
 4ec:	09 95       	icall
 4ee:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <Timer0NumberOfOverflowOccurence>
 4f2:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <Timer0NumberOfOverflowOccurence+0x1>
 4f6:	01 96       	adiw	r24, 0x01	; 1
 4f8:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <Timer0NumberOfOverflowOccurence+0x1>
 4fc:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <Timer0NumberOfOverflowOccurence>
 500:	ff 91       	pop	r31
 502:	ef 91       	pop	r30
 504:	bf 91       	pop	r27
 506:	af 91       	pop	r26
 508:	9f 91       	pop	r25
 50a:	8f 91       	pop	r24
 50c:	7f 91       	pop	r23
 50e:	6f 91       	pop	r22
 510:	5f 91       	pop	r21
 512:	4f 91       	pop	r20
 514:	3f 91       	pop	r19
 516:	2f 91       	pop	r18
 518:	0f 90       	pop	r0
 51a:	0f be       	out	0x3f, r0	; 63
 51c:	0f 90       	pop	r0
 51e:	1f 90       	pop	r1
 520:	18 95       	reti

00000522 <MCAL_TIMER0_Init>:
 522:	cf 93       	push	r28
 524:	df 93       	push	r29
 526:	ec 01       	movw	r28, r24
 528:	85 e0       	ldi	r24, 0x05	; 5
 52a:	fe 01       	movw	r30, r28
 52c:	ae e6       	ldi	r26, 0x6E	; 110
 52e:	b0 e0       	ldi	r27, 0x00	; 0
 530:	01 90       	ld	r0, Z+
 532:	0d 92       	st	X+, r0
 534:	8a 95       	dec	r24
 536:	e1 f7       	brne	.-8      	; 0x530 <MCAL_TIMER0_Init+0xe>
 538:	88 81       	ld	r24, Y
 53a:	82 30       	cpi	r24, 0x02	; 2
 53c:	d1 f0       	breq	.+52     	; 0x572 <MCAL_TIMER0_Init+0x50>
 53e:	28 f4       	brcc	.+10     	; 0x54a <MCAL_TIMER0_Init+0x28>
 540:	88 23       	and	r24, r24
 542:	49 f0       	breq	.+18     	; 0x556 <MCAL_TIMER0_Init+0x34>
 544:	81 30       	cpi	r24, 0x01	; 1
 546:	71 f0       	breq	.+28     	; 0x564 <MCAL_TIMER0_Init+0x42>
 548:	47 c0       	rjmp	.+142    	; 0x5d8 <MCAL_TIMER0_Init+0xb6>
 54a:	84 30       	cpi	r24, 0x04	; 4
 54c:	61 f1       	breq	.+88     	; 0x5a6 <MCAL_TIMER0_Init+0x84>
 54e:	f0 f0       	brcs	.+60     	; 0x58c <MCAL_TIMER0_Init+0x6a>
 550:	85 30       	cpi	r24, 0x05	; 5
 552:	b1 f1       	breq	.+108    	; 0x5c0 <MCAL_TIMER0_Init+0x9e>
 554:	41 c0       	rjmp	.+130    	; 0x5d8 <MCAL_TIMER0_Init+0xb6>
 556:	83 b7       	in	r24, 0x33	; 51
 558:	8f 7b       	andi	r24, 0xBF	; 191
 55a:	83 bf       	out	0x33, r24	; 51
 55c:	83 b7       	in	r24, 0x33	; 51
 55e:	87 7f       	andi	r24, 0xF7	; 247
 560:	83 bf       	out	0x33, r24	; 51
 562:	3a c0       	rjmp	.+116    	; 0x5d8 <MCAL_TIMER0_Init+0xb6>
 564:	83 b7       	in	r24, 0x33	; 51
 566:	8f 7b       	andi	r24, 0xBF	; 191
 568:	83 bf       	out	0x33, r24	; 51
 56a:	83 b7       	in	r24, 0x33	; 51
 56c:	88 60       	ori	r24, 0x08	; 8
 56e:	83 bf       	out	0x33, r24	; 51
 570:	33 c0       	rjmp	.+102    	; 0x5d8 <MCAL_TIMER0_Init+0xb6>
 572:	83 b7       	in	r24, 0x33	; 51
 574:	80 64       	ori	r24, 0x40	; 64
 576:	83 bf       	out	0x33, r24	; 51
 578:	83 b7       	in	r24, 0x33	; 51
 57a:	88 60       	ori	r24, 0x08	; 8
 57c:	83 bf       	out	0x33, r24	; 51
 57e:	83 b7       	in	r24, 0x33	; 51
 580:	80 61       	ori	r24, 0x10	; 16
 582:	83 bf       	out	0x33, r24	; 51
 584:	83 b7       	in	r24, 0x33	; 51
 586:	80 62       	ori	r24, 0x20	; 32
 588:	83 bf       	out	0x33, r24	; 51
 58a:	26 c0       	rjmp	.+76     	; 0x5d8 <MCAL_TIMER0_Init+0xb6>
 58c:	83 b7       	in	r24, 0x33	; 51
 58e:	80 64       	ori	r24, 0x40	; 64
 590:	83 bf       	out	0x33, r24	; 51
 592:	83 b7       	in	r24, 0x33	; 51
 594:	88 60       	ori	r24, 0x08	; 8
 596:	83 bf       	out	0x33, r24	; 51
 598:	83 b7       	in	r24, 0x33	; 51
 59a:	8f 7e       	andi	r24, 0xEF	; 239
 59c:	83 bf       	out	0x33, r24	; 51
 59e:	83 b7       	in	r24, 0x33	; 51
 5a0:	80 62       	ori	r24, 0x20	; 32
 5a2:	83 bf       	out	0x33, r24	; 51
 5a4:	19 c0       	rjmp	.+50     	; 0x5d8 <MCAL_TIMER0_Init+0xb6>
 5a6:	83 b7       	in	r24, 0x33	; 51
 5a8:	8f 7b       	andi	r24, 0xBF	; 191
 5aa:	83 bf       	out	0x33, r24	; 51
 5ac:	83 b7       	in	r24, 0x33	; 51
 5ae:	88 60       	ori	r24, 0x08	; 8
 5b0:	83 bf       	out	0x33, r24	; 51
 5b2:	83 b7       	in	r24, 0x33	; 51
 5b4:	8f 7e       	andi	r24, 0xEF	; 239
 5b6:	83 bf       	out	0x33, r24	; 51
 5b8:	83 b7       	in	r24, 0x33	; 51
 5ba:	80 62       	ori	r24, 0x20	; 32
 5bc:	83 bf       	out	0x33, r24	; 51
 5be:	0c c0       	rjmp	.+24     	; 0x5d8 <MCAL_TIMER0_Init+0xb6>
 5c0:	83 b7       	in	r24, 0x33	; 51
 5c2:	8f 7b       	andi	r24, 0xBF	; 191
 5c4:	83 bf       	out	0x33, r24	; 51
 5c6:	83 b7       	in	r24, 0x33	; 51
 5c8:	88 60       	ori	r24, 0x08	; 8
 5ca:	83 bf       	out	0x33, r24	; 51
 5cc:	83 b7       	in	r24, 0x33	; 51
 5ce:	80 61       	ori	r24, 0x10	; 16
 5d0:	83 bf       	out	0x33, r24	; 51
 5d2:	83 b7       	in	r24, 0x33	; 51
 5d4:	80 62       	ori	r24, 0x20	; 32
 5d6:	83 bf       	out	0x33, r24	; 51
 5d8:	88 81       	ld	r24, Y
 5da:	82 30       	cpi	r24, 0x02	; 2
 5dc:	18 f0       	brcs	.+6      	; 0x5e4 <MCAL_TIMER0_Init+0xc2>
 5de:	87 b3       	in	r24, 0x17	; 23
 5e0:	88 60       	ori	r24, 0x08	; 8
 5e2:	87 bb       	out	0x17, r24	; 23
 5e4:	e9 81       	ldd	r30, Y+1	; 0x01
 5e6:	8e 2f       	mov	r24, r30
 5e8:	90 e0       	ldi	r25, 0x00	; 0
 5ea:	87 30       	cpi	r24, 0x07	; 7
 5ec:	91 05       	cpc	r25, r1
 5ee:	08 f0       	brcs	.+2      	; 0x5f2 <MCAL_TIMER0_Init+0xd0>
 5f0:	4a c0       	rjmp	.+148    	; 0x686 <MCAL_TIMER0_Init+0x164>
 5f2:	fc 01       	movw	r30, r24
 5f4:	e6 5d       	subi	r30, 0xD6	; 214
 5f6:	ff 4f       	sbci	r31, 0xFF	; 255
 5f8:	0c 94 d9 03 	jmp	0x7b2	; 0x7b2 <__tablejump2__>
 5fc:	83 b7       	in	r24, 0x33	; 51
 5fe:	81 60       	ori	r24, 0x01	; 1
 600:	83 bf       	out	0x33, r24	; 51
 602:	83 b7       	in	r24, 0x33	; 51
 604:	8d 7f       	andi	r24, 0xFD	; 253
 606:	83 bf       	out	0x33, r24	; 51
 608:	83 b7       	in	r24, 0x33	; 51
 60a:	8b 7f       	andi	r24, 0xFB	; 251
 60c:	83 bf       	out	0x33, r24	; 51
 60e:	3b c0       	rjmp	.+118    	; 0x686 <MCAL_TIMER0_Init+0x164>
 610:	83 b7       	in	r24, 0x33	; 51
 612:	8e 7f       	andi	r24, 0xFE	; 254
 614:	83 bf       	out	0x33, r24	; 51
 616:	83 b7       	in	r24, 0x33	; 51
 618:	82 60       	ori	r24, 0x02	; 2
 61a:	83 bf       	out	0x33, r24	; 51
 61c:	83 b7       	in	r24, 0x33	; 51
 61e:	8b 7f       	andi	r24, 0xFB	; 251
 620:	83 bf       	out	0x33, r24	; 51
 622:	31 c0       	rjmp	.+98     	; 0x686 <MCAL_TIMER0_Init+0x164>
 624:	83 b7       	in	r24, 0x33	; 51
 626:	81 60       	ori	r24, 0x01	; 1
 628:	83 bf       	out	0x33, r24	; 51
 62a:	83 b7       	in	r24, 0x33	; 51
 62c:	82 60       	ori	r24, 0x02	; 2
 62e:	83 bf       	out	0x33, r24	; 51
 630:	83 b7       	in	r24, 0x33	; 51
 632:	8b 7f       	andi	r24, 0xFB	; 251
 634:	83 bf       	out	0x33, r24	; 51
 636:	27 c0       	rjmp	.+78     	; 0x686 <MCAL_TIMER0_Init+0x164>
 638:	83 b7       	in	r24, 0x33	; 51
 63a:	8e 7f       	andi	r24, 0xFE	; 254
 63c:	83 bf       	out	0x33, r24	; 51
 63e:	83 b7       	in	r24, 0x33	; 51
 640:	8d 7f       	andi	r24, 0xFD	; 253
 642:	83 bf       	out	0x33, r24	; 51
 644:	83 b7       	in	r24, 0x33	; 51
 646:	84 60       	ori	r24, 0x04	; 4
 648:	83 bf       	out	0x33, r24	; 51
 64a:	1d c0       	rjmp	.+58     	; 0x686 <MCAL_TIMER0_Init+0x164>
 64c:	83 b7       	in	r24, 0x33	; 51
 64e:	81 60       	ori	r24, 0x01	; 1
 650:	83 bf       	out	0x33, r24	; 51
 652:	83 b7       	in	r24, 0x33	; 51
 654:	8d 7f       	andi	r24, 0xFD	; 253
 656:	83 bf       	out	0x33, r24	; 51
 658:	83 b7       	in	r24, 0x33	; 51
 65a:	84 60       	ori	r24, 0x04	; 4
 65c:	83 bf       	out	0x33, r24	; 51
 65e:	13 c0       	rjmp	.+38     	; 0x686 <MCAL_TIMER0_Init+0x164>
 660:	83 b7       	in	r24, 0x33	; 51
 662:	8e 7f       	andi	r24, 0xFE	; 254
 664:	83 bf       	out	0x33, r24	; 51
 666:	83 b7       	in	r24, 0x33	; 51
 668:	82 60       	ori	r24, 0x02	; 2
 66a:	83 bf       	out	0x33, r24	; 51
 66c:	83 b7       	in	r24, 0x33	; 51
 66e:	84 60       	ori	r24, 0x04	; 4
 670:	83 bf       	out	0x33, r24	; 51
 672:	09 c0       	rjmp	.+18     	; 0x686 <MCAL_TIMER0_Init+0x164>
 674:	83 b7       	in	r24, 0x33	; 51
 676:	81 60       	ori	r24, 0x01	; 1
 678:	83 bf       	out	0x33, r24	; 51
 67a:	83 b7       	in	r24, 0x33	; 51
 67c:	82 60       	ori	r24, 0x02	; 2
 67e:	83 bf       	out	0x33, r24	; 51
 680:	83 b7       	in	r24, 0x33	; 51
 682:	84 60       	ori	r24, 0x04	; 4
 684:	83 bf       	out	0x33, r24	; 51
 686:	89 81       	ldd	r24, Y+1	; 0x01
 688:	85 50       	subi	r24, 0x05	; 5
 68a:	82 30       	cpi	r24, 0x02	; 2
 68c:	18 f4       	brcc	.+6      	; 0x694 <MCAL_TIMER0_Init+0x172>
 68e:	87 b3       	in	r24, 0x17	; 23
 690:	8e 7f       	andi	r24, 0xFE	; 254
 692:	87 bb       	out	0x17, r24	; 23
 694:	8a 81       	ldd	r24, Y+2	; 0x02
 696:	81 30       	cpi	r24, 0x01	; 1
 698:	19 f0       	breq	.+6      	; 0x6a0 <MCAL_TIMER0_Init+0x17e>
 69a:	82 30       	cpi	r24, 0x02	; 2
 69c:	29 f0       	breq	.+10     	; 0x6a8 <MCAL_TIMER0_Init+0x186>
 69e:	07 c0       	rjmp	.+14     	; 0x6ae <MCAL_TIMER0_Init+0x18c>
 6a0:	89 b7       	in	r24, 0x39	; 57
 6a2:	81 60       	ori	r24, 0x01	; 1
 6a4:	89 bf       	out	0x39, r24	; 57
 6a6:	03 c0       	rjmp	.+6      	; 0x6ae <MCAL_TIMER0_Init+0x18c>
 6a8:	89 b7       	in	r24, 0x39	; 57
 6aa:	82 60       	ori	r24, 0x02	; 2
 6ac:	89 bf       	out	0x39, r24	; 57
 6ae:	8a 81       	ldd	r24, Y+2	; 0x02
 6b0:	88 23       	and	r24, r24
 6b2:	19 f0       	breq	.+6      	; 0x6ba <MCAL_TIMER0_Init+0x198>
 6b4:	8f b7       	in	r24, 0x3f	; 63
 6b6:	80 68       	ori	r24, 0x80	; 128
 6b8:	8f bf       	out	0x3f, r24	; 63
 6ba:	8a 81       	ldd	r24, Y+2	; 0x02
 6bc:	81 30       	cpi	r24, 0x01	; 1
 6be:	19 f0       	breq	.+6      	; 0x6c6 <MCAL_TIMER0_Init+0x1a4>
 6c0:	82 30       	cpi	r24, 0x02	; 2
 6c2:	41 f0       	breq	.+16     	; 0x6d4 <MCAL_TIMER0_Init+0x1b2>
 6c4:	0d c0       	rjmp	.+26     	; 0x6e0 <MCAL_TIMER0_Init+0x1be>
 6c6:	8b 81       	ldd	r24, Y+3	; 0x03
 6c8:	9c 81       	ldd	r25, Y+4	; 0x04
 6ca:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <GPtr_TIMER0_IRQCallBack+0x3>
 6ce:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <GPtr_TIMER0_IRQCallBack+0x2>
 6d2:	06 c0       	rjmp	.+12     	; 0x6e0 <MCAL_TIMER0_Init+0x1be>
 6d4:	8b 81       	ldd	r24, Y+3	; 0x03
 6d6:	9c 81       	ldd	r25, Y+4	; 0x04
 6d8:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <GPtr_TIMER0_IRQCallBack+0x1>
 6dc:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <GPtr_TIMER0_IRQCallBack>
 6e0:	df 91       	pop	r29
 6e2:	cf 91       	pop	r28
 6e4:	08 95       	ret

000006e6 <MCAL_TIMER0_SetPWMDutyCycle>:
}

void MCAL_TIMER0_SetPWMDutyCycle(uint8_t Duty_Cycle){
		if(G_Timer0Configuration.Timer0Mode == TIMER0_MODE_Fast_PWM_Noninverting)
 6e6:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <G_Timer0Configuration>
 6ea:	93 30       	cpi	r25, 0x03	; 3
 6ec:	11 f4       	brne	.+4      	; 0x6f2 <MCAL_TIMER0_SetPWMDutyCycle+0xc>
		{
			OCR0 = Duty_Cycle;
 6ee:	8c bf       	out	0x3c, r24	; 60
 6f0:	08 95       	ret
		}
		else if(G_Timer0Configuration.Timer0Mode == TIMER0_MODE_Fast_PWM_Inverting)
 6f2:	92 30       	cpi	r25, 0x02	; 2
 6f4:	11 f4       	brne	.+4      	; 0x6fa <MCAL_TIMER0_SetPWMDutyCycle+0x14>
		{
			OCR0 = (uint8_t)(255 - Duty_Cycle);
 6f6:	80 95       	com	r24
 6f8:	8c bf       	out	0x3c, r24	; 60
 6fa:	08 95       	ret

000006fc <__vector_4>:
/*********************************************
 *                                           *
 *         IRQ HANDLERS DEFINITION           *
 * 							    			 *
 *********************************************/	
ISR(TIMER2_CTC_IRQHandler) {
 6fc:	1f 92       	push	r1
 6fe:	0f 92       	push	r0
 700:	0f b6       	in	r0, 0x3f	; 63
 702:	0f 92       	push	r0
 704:	11 24       	eor	r1, r1
 706:	2f 93       	push	r18
 708:	3f 93       	push	r19
 70a:	4f 93       	push	r20
 70c:	5f 93       	push	r21
 70e:	6f 93       	push	r22
 710:	7f 93       	push	r23
 712:	8f 93       	push	r24
 714:	9f 93       	push	r25
 716:	af 93       	push	r26
 718:	bf 93       	push	r27
 71a:	ef 93       	push	r30
 71c:	ff 93       	push	r31
	if (GPtr_TIMER2_IRQCallBack[TIMER2_CTC_VECTOR_ID] != NULL) {
 71e:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <GPtr_TIMER2_IRQCallBack>
 722:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <GPtr_TIMER2_IRQCallBack+0x1>
 726:	30 97       	sbiw	r30, 0x00	; 0
 728:	09 f0       	breq	.+2      	; 0x72c <__vector_4+0x30>
		//Call Back C function() which will be called once IRQ happen
		GPtr_TIMER2_IRQCallBack[TIMER2_CTC_VECTOR_ID]();
 72a:	09 95       	icall
	}
}
 72c:	ff 91       	pop	r31
 72e:	ef 91       	pop	r30
 730:	bf 91       	pop	r27
 732:	af 91       	pop	r26
 734:	9f 91       	pop	r25
 736:	8f 91       	pop	r24
 738:	7f 91       	pop	r23
 73a:	6f 91       	pop	r22
 73c:	5f 91       	pop	r21
 73e:	4f 91       	pop	r20
 740:	3f 91       	pop	r19
 742:	2f 91       	pop	r18
 744:	0f 90       	pop	r0
 746:	0f be       	out	0x3f, r0	; 63
 748:	0f 90       	pop	r0
 74a:	1f 90       	pop	r1
 74c:	18 95       	reti

0000074e <__vector_5>:

ISR(TIMER2_OVF_IRQHandler) {
 74e:	1f 92       	push	r1
 750:	0f 92       	push	r0
 752:	0f b6       	in	r0, 0x3f	; 63
 754:	0f 92       	push	r0
 756:	11 24       	eor	r1, r1
 758:	2f 93       	push	r18
 75a:	3f 93       	push	r19
 75c:	4f 93       	push	r20
 75e:	5f 93       	push	r21
 760:	6f 93       	push	r22
 762:	7f 93       	push	r23
 764:	8f 93       	push	r24
 766:	9f 93       	push	r25
 768:	af 93       	push	r26
 76a:	bf 93       	push	r27
 76c:	ef 93       	push	r30
 76e:	ff 93       	push	r31
	if (GPtr_TIMER2_IRQCallBack[TIMER2_OVF_VECTOR_ID] != NULL) {
 770:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <GPtr_TIMER2_IRQCallBack+0x2>
 774:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <GPtr_TIMER2_IRQCallBack+0x3>
 778:	30 97       	sbiw	r30, 0x00	; 0
 77a:	51 f0       	breq	.+20     	; 0x790 <__vector_5+0x42>
		//Call Back C function() which will be called once IRQ happen
		GPtr_TIMER2_IRQCallBack[TIMER2_OVF_VECTOR_ID]();
 77c:	09 95       	icall
		Timer2NumberOfOverflowOccurence++;
 77e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <Timer2NumberOfOverflowOccurence>
 782:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <Timer2NumberOfOverflowOccurence+0x1>
 786:	01 96       	adiw	r24, 0x01	; 1
 788:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <Timer2NumberOfOverflowOccurence+0x1>
 78c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <Timer2NumberOfOverflowOccurence>
	}
}
 790:	ff 91       	pop	r31
 792:	ef 91       	pop	r30
 794:	bf 91       	pop	r27
 796:	af 91       	pop	r26
 798:	9f 91       	pop	r25
 79a:	8f 91       	pop	r24
 79c:	7f 91       	pop	r23
 79e:	6f 91       	pop	r22
 7a0:	5f 91       	pop	r21
 7a2:	4f 91       	pop	r20
 7a4:	3f 91       	pop	r19
 7a6:	2f 91       	pop	r18
 7a8:	0f 90       	pop	r0
 7aa:	0f be       	out	0x3f, r0	; 63
 7ac:	0f 90       	pop	r0
 7ae:	1f 90       	pop	r1
 7b0:	18 95       	reti

000007b2 <__tablejump2__>:
 7b2:	ee 0f       	add	r30, r30
 7b4:	ff 1f       	adc	r31, r31
 7b6:	05 90       	lpm	r0, Z+
 7b8:	f4 91       	lpm	r31, Z
 7ba:	e0 2d       	mov	r30, r0
 7bc:	09 94       	ijmp

000007be <_exit>:
 7be:	f8 94       	cli

000007c0 <__stop_program>:
 7c0:	ff cf       	rjmp	.-2      	; 0x7c0 <__stop_program>
